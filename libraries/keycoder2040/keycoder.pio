; Debounce Constants
; --------------------------------------------------
.define SET_CYCLES                  2
.define ITERATIONS                  2
.define JMP_CYCLES                  2
.define public ENC_DEBOUNCE_CYCLES  (SET_CYCLES + (JMP_CYCLES * ITERATIONS))

.program keycoder

.wrap_target
    set pindirs, 0b01111 ; change setpins direction to output
loop:
; read all 8 input pins into ISR
; #1 Sets column IO high 
; #2 delays for IO to settle for IO_SET_CYCLES  
; #3 Shifts encoder lines into ISR
; #4 repeats for all 4 columns 
; #5 copies ISR contents to X reg 
 
    set pins 0b1000         ;set column 1 high only
    set y,  (ITERATIONS - 1) [SET_CYCLES - 1]
col1_loop:                   
    jmp y-- col1_loop       [JMP_CYCLES - 1]
    in pins 8              
    
    set pins 0b0100         ;set column 2 high only
    set y,  (ITERATIONS - 1) [SET_CYCLES - 1]     
col2_loop:    
    jmp y-- col2_loop       [JMP_CYCLES - 1]
    in pins 8              

    set pins 0b0010         ;set column 3 high only
    set y,  (ITERATIONS - 1) [SET_CYCLES - 1]
col3_loop:    
    jmp y-- col3_loop     [JMP_CYCLES - 1]
    in pins 8            

    set pins 0b0001         ;set column 4 high only
    set y,  (ITERATIONS - 1) [SET_CYCLES - 1]
col4_loop:    
    jmp y-- col4_loop      [JMP_CYCLES - 1] 
    in pins 8               
    mov x, isr              
    mov y, osr              
    jmp x!=y state_changed  ; Compares x to y to see if encoder state has changed
.wrap

state_changed:
    push noblock            ; this also clears isr
    mov osr, x             
    set y, (ITERATIONS - 1) [SET_CYCLES - 1]
debounce_loop:
    jmp y-- debounce_loop [JMP_CYCLES - 1]
    jmp loop               
    